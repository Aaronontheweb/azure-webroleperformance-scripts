h2. Windows Azure Web Role Performance Scripts

This is a set of batch files you can include in your startup tasks if you run into performance limitations as a result of default IIS and Windows Server configuration behavior on Azure.

h3. Inventory of Scripts

@upgradeIISthreadcount.cmd@ - upgrades the number of the available threads for emptying the IIS request queue and increases the number of available connections per CPU.
@disableAppPoolTimeout.cmd@ - disables the AppPool timeout recycle in IIS, which helps improve the performance of lower-traffic applications.
@logIISthreadcount.cmd@ - logs the settings which are modified by @upgradeIISthreadcount.cmd@ - can be modified to log other sections of @machine.config@ as well.

h3. Running Batch Files as Azure Startup Tasks

The recommended approach for using these scripts is to include them as "Windows Azure Startup Tasks":"http://msdn.microsoft.com/en-us/library/windowsazure/gg456327.aspx" in your @ServiceDefinition.csdef@ file.

The syntax looks like this:
<pre>
<Startup>
    <Task commandLine="[parent folder]\upgradeIISthreadcount.cmd" executionContext="elevated" taskType="background" />
    <Task commandLine="[parent folder]\disableAppPoolTimeout.cmd" executionContext="elevated" taskType="background" />
</Startup>
</pre>

All of these batch files in particular should run under @executionContext="elevated"@ which gives them the ability to be executed with administrator permissions.

They should also be executed as a "background" task - which means that they are executed before the application ever initializes and begins accepting requests.

In Visual Studio you'll need to make sure that all of these individual batch files have their @Copy to Output Directory@ setting set to "Always."

h3. License

These files are offered as-is to be used in any of your deployments.

USE AT YOUR OWN RISK. MAY NOT SOLVE YOUR PERFORMANCE ISSUES, but will help you manipulate machine.config should you need it.